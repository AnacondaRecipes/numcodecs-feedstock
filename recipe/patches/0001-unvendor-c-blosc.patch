From 3251ccc0d5996edda0d180f1787f0baeb1a016f5 Mon Sep 17 00:00:00 2001
From: Charles Bousseau <cbousseau@anaconda.com>
Date: Wed, 7 Feb 2024 16:59:16 -0500
Subject: [PATCH] unvendor cblosc

---
diff --git a/setup.py b/setup.py
index b6db079..80a6da2 100644
--- a/setup.py
+++ b/setup.py
@@ -55,50 +55,9 @@ def blosc_extension():
     extra_compile_args = base_compile_args.copy()
     define_macros = []
 
-    # setup blosc sources
-    blosc_sources = [f for f in glob('c-blosc/blosc/*.c') if 'avx2' not in f and 'sse2' not in f]
-    include_dirs = [os.path.join('c-blosc', 'blosc')]
-
-    # add internal complibs
-    blosc_sources += glob('c-blosc/internal-complibs/lz4*/*.c')
-    blosc_sources += glob('c-blosc/internal-complibs/snappy*/*.cc')
-    blosc_sources += glob('c-blosc/internal-complibs/zlib*/*.c')
-    blosc_sources += glob('c-blosc/internal-complibs/zstd*/common/*.c')
-    blosc_sources += glob('c-blosc/internal-complibs/zstd*/compress/*.c')
-    blosc_sources += glob('c-blosc/internal-complibs/zstd*/decompress/*.c')
-    blosc_sources += glob('c-blosc/internal-complibs/zstd*/dictBuilder/*.c')
-    include_dirs += [d for d in glob('c-blosc/internal-complibs/*') if os.path.isdir(d)]
-    include_dirs += [d for d in glob('c-blosc/internal-complibs/*/*') if os.path.isdir(d)]
-    include_dirs += [d for d in glob('c-blosc/internal-complibs/*/*/*') if os.path.isdir(d)]
-    # remove minizip because Python.h 3.8 tries to include crypt.h
-    include_dirs = [d for d in include_dirs if 'minizip' not in d]
-    define_macros += [
-        ('HAVE_LZ4', 1),
-        # ('HAVE_SNAPPY', 1),
-        ('HAVE_ZLIB', 1),
-        ('HAVE_ZSTD', 1),
-    ]
-    # define_macros += [('CYTHON_TRACE', '1')]
-
-    # SSE2
-    if have_sse2 and not disable_sse2:
-        info('compiling Blosc extension with SSE2 support')
-        extra_compile_args.append('-DSHUFFLE_SSE2_ENABLED')
-        blosc_sources += [f for f in glob('c-blosc/blosc/*.c') if 'sse2' in f]
-        if os.name == 'nt':
-            define_macros += [('__SSE2__', 1)]
-    else:
-        info('compiling Blosc extension without SSE2 support')
-
-    # AVX2
-    if have_avx2 and not disable_avx2:
-        info('compiling Blosc extension with AVX2 support')
-        extra_compile_args.append('-DSHUFFLE_AVX2_ENABLED')
-        blosc_sources += [f for f in glob('c-blosc/blosc/*.c') if 'avx2' in f]
-        if os.name == 'nt':
-            define_macros += [('__AVX2__', 1)]
-    else:
-        info('compiling Blosc extension without AVX2 support')
+    include_dirs = [os.path.join(sys.prefix, 'include')]
+    library_dirs = [os.path.join(sys.prefix, 'lib')]
+    libraries = ["blosc"]
 
     # include assembly files
     if cpuinfo.platform.machine() == 'x86_64':
@@ -114,11 +73,13 @@ def blosc_extension():
     extensions = [
         Extension(
             'numcodecs.blosc',
-            sources=sources + blosc_sources,
+            sources=sources,
             include_dirs=include_dirs,
             define_macros=define_macros,
             extra_compile_args=extra_compile_args,
             extra_objects=extra_objects,
+            library_dirs=library_dirs,
+            libraries=libraries
         ),
     ]
 
@@ -128,19 +89,12 @@ def blosc_extension():
 def zstd_extension():
     info('setting up Zstandard extension')
 
-    zstd_sources = []
     extra_compile_args = base_compile_args.copy()
-    include_dirs = []
     define_macros = []
 
-    # setup sources - use zstd bundled in blosc
-    zstd_sources += glob('c-blosc/internal-complibs/zstd*/common/*.c')
-    zstd_sources += glob('c-blosc/internal-complibs/zstd*/compress/*.c')
-    zstd_sources += glob('c-blosc/internal-complibs/zstd*/decompress/*.c')
-    zstd_sources += glob('c-blosc/internal-complibs/zstd*/dictBuilder/*.c')
-    include_dirs += [d for d in glob('c-blosc/internal-complibs/zstd*') if os.path.isdir(d)]
-    include_dirs += [d for d in glob('c-blosc/internal-complibs/zstd*/*') if os.path.isdir(d)]
-    # define_macros += [('CYTHON_TRACE', '1')]
+    include_dirs = [os.path.join(sys.prefix, 'include')]
+    library_dirs = [os.path.join(sys.prefix, 'lib')]
+    libraries = ["zstd"]
 
     sources = ['numcodecs/zstd.pyx']
 
@@ -156,11 +110,127 @@ def zstd_extension():
     extensions = [
         Extension(
             'numcodecs.zstd',
-            sources=sources + zstd_sources,
+            sources=sources,
             include_dirs=include_dirs,
             define_macros=define_macros,
             extra_compile_args=extra_compile_args,
             extra_objects=extra_objects,
-- 
2.39.3 (Apple Git-145)

